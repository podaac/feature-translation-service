{
	"info": {
		"_postman_id": "8b24f838-e48e-4ac9-8bab-5df54af7b714",
		"name": "FTS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "V1",
			"item": [
				{
					"name": "paging",
					"item": [
						{
							"name": "page huc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const page1_json = pm.response.json();",
											"pm.test(\"Expected number of results on first page\", function () {",
											"    pm.expect(page1_json).to.have.property(\"results_count\", 2);",
											"    pm.expect(page1_json.results).to.be.an(\"array\");",
											"    pm.expect(page1_json.results).to.have.lengthOf(2);",
											"});",
											"",
											"const page2_request = pm.request;",
											"page2_request.removeQueryParams(\"page_number\");",
											"page2_request.addQueryParams(\"page_number=2\")",
											"",
											"pm.sendRequest(page2_request, function (err, response) {",
											"    const page2_json = response.json();",
											"    pm.test(\"Page 2 contains different results\", function () {",
											"        pm.expect(page2_json).to.have.property(\"results_count\", 2);",
											"        pm.expect(page2_json.results).to.be.an(\"array\");",
											"        pm.expect(page2_json.results).to.have.lengthOf(2);",
											"        pm.expect(page2_json.results).to.not.deep.equal(page1_json.results);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v1/huc/18?page_number=1&page_size=2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"huc",
										"18"
									],
									"query": [
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "page region",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const page1_json = pm.response.json();",
											"pm.test(\"Expected number of results on first page\", function () {",
											"    pm.expect(page1_json).to.have.property(\"results_count\", 2);",
											"    pm.expect(page1_json.results).to.be.an(\"array\");",
											"    pm.expect(page1_json.results).to.have.lengthOf(2);",
											"});",
											"",
											"const page2_request = pm.request;",
											"page2_request.removeQueryParams(\"page_number\");",
											"page2_request.addQueryParams(\"page_number=2\")",
											"",
											"pm.sendRequest(page2_request, function (err, response) {",
											"    const page2_json = response.json();",
											"    pm.test(\"Page 2 contains different results\", function () {",
											"        pm.expect(page2_json).to.have.property(\"results_count\", 2);",
											"        pm.expect(page2_json.results).to.be.an(\"array\");",
											"        pm.expect(page2_json.results).to.have.lengthOf(2);",
											"        pm.expect(page2_json.results).to.not.deep.equal(page1_json.results);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v1/region/california?page_number=1&page_size=2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"region",
										"california"
									],
									"query": [
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "page river reach",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const page1_json = pm.response.json();",
											"pm.test(\"Expected number of results on first page\", function () {",
											"    pm.expect(page1_json).to.have.property(\"results_count\", 2);",
											"    pm.expect(page1_json.results).to.be.an(\"array\");",
											"    pm.expect(page1_json.results).to.have.lengthOf(2);",
											"});",
											"",
											"const page2_request = pm.request;",
											"page2_request.removeQueryParams(\"page_number\");",
											"page2_request.addQueryParams(\"page_number=2\")",
											"",
											"pm.sendRequest(page2_request, function (err, response) {",
											"    const page2_json = response.json();",
											"    pm.test(\"Page 2 contains different results\", function () {",
											"        pm.expect(page2_json).to.have.property(\"results_count\", 2);",
											"        pm.expect(page2_json.results).to.be.an(\"array\");",
											"        pm.expect(page2_json.results).to.have.lengthOf(2);",
											"        pm.expect(page2_json.results).to.not.deep.equal(page1_json.results);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v1/rivers/reach/114100000?page_number=1&page_size=2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"rivers",
										"reach",
										"114100000"
									],
									"query": [
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "page river node",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const page1_json = pm.response.json();",
											"pm.test(\"Expected number of results on first page\", function () {",
											"    pm.expect(page1_json).to.have.property(\"results_count\", 2);",
											"    pm.expect(page1_json.results).to.be.an(\"array\");",
											"    pm.expect(page1_json.results).to.have.lengthOf(2);",
											"});",
											"",
											"const page2_request = pm.request;",
											"page2_request.removeQueryParams(\"page_number\");",
											"page2_request.addQueryParams(\"page_number=2\")",
											"",
											"pm.sendRequest(page2_request, function (err, response) {",
											"    const page2_json = response.json();",
											"    pm.test(\"Page 2 contains different results\", function () {",
											"        pm.expect(page2_json).to.have.property(\"results_count\", 2);",
											"        pm.expect(page2_json.results).to.be.an(\"array\");",
											"        pm.expect(page2_json.results).to.have.lengthOf(2);",
											"        pm.expect(page2_json.results).to.not.deep.equal(page1_json.results);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/v1/rivers/node/11410000010?page_number=1&page_size=2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v1",
										"rivers",
										"node",
										"11410000010"
									],
									"query": [
										{
											"key": "page_number",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get by huc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Expected number of hits\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 5615);",
									"});",
									"pm.test(\"First result is expected HUC\", function () {",
									"    pm.expect(body.results[0]).to.have.property(\"HUC\", \"18\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/huc/18",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"huc",
								"18"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by region California*",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Expected number of hits\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 33);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/region/California",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"region",
								"California"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by region \"California Region\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Exactly 1 hit\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 1);",
									"});",
									"pm.test(\"Result is expected HUC\", function () {",
									"    pm.expect(body.results[0]).to.have.property(\"HUC\", \"18\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/region/California%20Region?exact=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"region",
								"California%20Region"
							],
							"query": [
								{
									"key": "exact",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get by reach id exact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Exactly 1 hit\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 1);",
									"});",
									"pm.test(\"Result is expected reach\", function () {",
									"    pm.expect(body.results[0]).to.have.property(\"reach_id\", \"11410000013\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/rivers/reach/11410000013?exact=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"rivers",
								"reach",
								"11410000013"
							],
							"query": [
								{
									"key": "exact",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get by node id exact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Exactly 1 hit\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 1);",
									"});",
									"pm.test(\"Result is expected node\", function () {",
									"    pm.expect(body.results[0]).to.have.property(\"node_id\", \"11410000010023\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/rivers/node/11410000010023?exact=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"rivers",
								"node",
								"11410000010023"
							],
							"query": [
								{
									"key": "exact",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get by river name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Expected number of hits\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 1100);",
									"});",
									"pm.test(\"First result is expected river name\", function () {",
									"    pm.expect(body.results[0]).to.have.property(\"river_name\", \"Santa Barbara River\");",
									"});",
									"pm.test(\"Status code is 206\", function () {",
									"    pm.response.to.have.status(206);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/rivers/Santa",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"rivers",
								"Santa"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by river name no nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Expected number of hits\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 73);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/rivers/Yana River?nodes=false",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"rivers",
								"Yana River"
							],
							"query": [
								{
									"key": "nodes",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get by reach id filter river name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Exactly 1 hits\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 1);",
									"});",
									"pm.test(\"First reach is Santa Barbara River\", function () {",
									"    pm.expect(body.results[0]).to.have.property(\"river_name\", \"Santa Barbara River\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/rivers/reach/141000008?river_name=Santa",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"rivers",
								"reach",
								"141000008"
							],
							"query": [
								{
									"key": "river_name",
									"value": "Santa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get by node id filter river name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Exactly 54 hits\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 54);",
									"});",
									"pm.test(\"First reach is Santa Barbara River\", function () {",
									"    pm.expect(body.results[0]).to.have.property(\"river_name\", \"Santa Barbara River\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/rivers/node/141000008?river_name=Santa",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"rivers",
								"node",
								"141000008"
							],
							"query": [
								{
									"key": "river_name",
									"value": "Santa"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "default",
			"item": [
				{
					"name": "get by huc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Expected number of hits\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 5615);",
									"});",
									"pm.test(\"Result contains expected HUC\", function () {",
									"    pm.expect(body.results).to.have.property(\"18\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/huc/18",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"huc",
								"18"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by region California*",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Expected number of hits\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 33);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/region/California",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"region",
								"California"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by region \"California Region\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Exactly 1 hit\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 1);",
									"});",
									"pm.test(\"Result is expected HUC\", function () {",
									"    pm.expect(body.results[\"California Region\"]).to.have.property(\"HUC\", \"18\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/region/California%20Region?exact=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"region",
								"California%20Region"
							],
							"query": [
								{
									"key": "exact",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get by reach id exact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Exactly 1 hit\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 1);",
									"});",
									"pm.test(\"Result is expected reach\", function () {",
									"    pm.expect(body.results[\"11410000013\"]).to.have.property(\"reach_id\", \"11410000013\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rivers/reach/11410000013?exact=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"rivers",
								"reach",
								"11410000013"
							],
							"query": [
								{
									"key": "exact",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get by node id exact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();",
									"pm.test(\"Exactly 1 hit\", function () {",
									"    pm.expect(body).to.have.property(\"hits\", 1);",
									"});",
									"pm.test(\"Result is expected node\", function () {",
									"    pm.expect(body.results[\"11410000010023\"]).to.have.property(\"node_id\", \"11410000010023\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rivers/node/11410000010023?exact=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"rivers",
								"node",
								"11410000010023"
							],
							"query": [
								{
									"key": "exact",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://fts.podaac.{{venue}}.earthdata.nasa.gov"
		}
	]
}